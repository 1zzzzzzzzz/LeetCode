/**
 * 
 */
package acm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author Lil Hui
 * @Time 2016年3月6日 下午2:57:58
 */
public class Main {
	public static int findKthSmallest(int[] a, int begin1, int end1, int[] b,
			int begin2, int end2, int k) {
		// 保证 a的长度小于 b的长度
		if (end1 > end2)
			return findKthSmallest(b, begin2, end2, a, begin1, end1, k);
		if (end1 == 0)
			return b[begin2 + k - 1];
		if (k == 1)
			return a[begin1] < b[begin2] ? a[begin1] : b[begin2];

		int partA = (k / 2) < end1 ? (k / 2) : end1; // 比较 end1与k/2哪个小
		int partB = k - partA; // 第K大数，若取在a数组中 partA位置上，则b中 应该 为k - partA

		if (a[begin1 + partA - 1] == b[begin2 + partB - 1])
			return a[begin1 + partA - 1];
		else if (a[begin1 + partA - 1] > b[begin2 + partB - 1]) {
			begin2 = begin2 + partB;
			end2 = end2 - partB; // 新的k值可能存在于[begin2, end2]中 ,
			k = k - partB;
		} else {
			begin1 = begin1 + partA;
			end1 = end1 - partA;
			k = k - partA;
		}
		return findKthSmallest(a, begin1, end1, b, begin2, end2, k);
	}

	public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int len1 = nums1.length, len2 = nums2.length, sumLen = len1 + len2;
		if (sumLen % 2 != 0) {

			return findKthSmallest(nums1, 0, len1, nums2, 0, len2,
					sumLen / 2 + 1);
		} else {
			return (findKthSmallest(nums1, 0, len1, nums2, 0, len2, sumLen / 2) + findKthSmallest(
					nums1, 0, len1, nums2, 0, len2, sumLen / 2 + 1)) / 2.0;
		}

	}

	public static double findMedianSortedArrays2(int[] A, int[] B) {
		int m = A.length, n = B.length;
		int l = (m + n + 1) / 2;
		int r = (m + n + 2) / 2;
		return (getkth(A, 0, B, 0, l) + getkth(A, 0, B, 0, r)) / 2.0;
	}

	public static double getkth(int[] A, int aStart, int[] B, int bStart, int k) {
		if (aStart > A.length - 1)
			return B[bStart + k - 1];
		if (bStart > B.length - 1)
			return A[aStart + k - 1];
		if (k == 1)
			return Math.min(A[aStart], B[bStart]);

		int aMid = Integer.MAX_VALUE, bMid = Integer.MAX_VALUE;
		if (aStart + k / 2 - 1 < A.length)
			aMid = A[aStart + k / 2 - 1];
		if (bStart + k / 2 - 1 < B.length)
			bMid = B[bStart + k / 2 - 1];

		if (aMid < bMid)
			return getkth(A, aStart + k / 2, B, bStart, k - k / 2);// Check:aRight +bLeft
		else
			return getkth(A, aStart, B, bStart + k / 2, k - k / 2);// Check:bRight +aLeft
	}

	public static void main(String[] args) {
		int a[] = { 1, 12 }; // 长 6
		int b[] = { 2, 13, 18 }; // 长 5
		System.out.println(findMedianSortedArrays2(a, b)); // 14
	}
}
// "bbbcababcd"